#!/usr/bin/env python3
# Copyright (c) Vivek Venugopalan, 2020.  

import os
import random
import string
from argparse import ArgumentParser
import urllib.request, urllib.error, urllib.parse
import hashlib

def CopyClipboard(data):
    os.popen('pbcopy -pboard general', 'wb').write(data)


def CheckItem(dataset, pwd, flag):
    return len(set(dataset).intersection(set(pwd))) > 0 if flag else True

def CheckAvailable(pwd, uppercase, digits, punctuation):
    if not CheckItem(string.uppercase, pwd, uppercase):
        return False
    if not CheckItem(string.digits, pwd, digits):
        return False
    if not CheckItem(string.punctuation, pwd, punctuation):
        return False

    return True

def printQRCode(pwd):
    import pyqrcode
    return pyqrcode.create(pwd).terminal(quiet_zone=1)


def GenPassword(
        length=10,
        left_hand=False,
        right_hand=False,
        uppercase=False,
        mixedcase=True,
        digits=True,
        punctuation=True):
    population = ''
    if left_hand:
        population = '12345qwertyasdfgzxcvb'
        if uppercase:
            population += 'QWERTYASDFGZXCVB'
    elif right_hand:
        population = '[];\',/.7890-uiopjklnmHh'
        if uppercase:
            population += 'UIOPJKLNMH'
    else:
        population += string.uppercase if uppercase else ''
        population += string.lowercase if mixedcase else ''
        population += string.digits if digits else ''
        population += string.punctuation if punctuation else ''

    rnd = random.SystemRandom()
    pwd = ''.join(rnd.sample(population, length))
    while not CheckAvailable(pwd, uppercase, digits, punctuation):
        pwd = ''.join(rnd.sample(population, length))

    return pwd


def check_compromised(pwd):
    hashedpwd = hashlib.sha1(pwd).hexdigest().upper()
    hashedprefix = hashedpwd[0:5]
    hashedremaining = hashedpwd[5:]
    req = urllib.request.Request("https://api.pwnedpasswords.com/range/" + hashedprefix, None, 
            {'User-agent' : 
                'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5'})
    stream = urllib.request.urlopen(req)
    for item in stream:
        if hashedremaining == item.split(':')[0]:
            return True
    return False


if __name__ == '__main__':
    parser = ArgumentParser()
    uc_group = parser.add_mutually_exclusive_group()
    uc_group.add_argument(
        '-u',
        '--uppercase',
        dest='uppercase',
        action='store_true',
        help='Use ONLY uppercase letters')
    uc_group.add_argument(
        '-o',
        '--mixedcase',
        dest='mixedcase',
        action='store_true',
        help='Use mixed case letters (default)')
    uc_group.set_defaults(mixedcase=True)

    parser.add_argument('-n', '--number', dest='number', action='store_true')
    parser.add_argument(
        '-N',
        '--no-number',
        dest='number',
        action='store_false')
    parser.set_defaults(number=True)

    punc_group = parser.add_mutually_exclusive_group()
    punc_group.add_argument(
        '-p',
        '--punctuation',
        dest='punctuation',
        action='store_true')
    punc_group.add_argument(
        '-P',
        '--no-punctuation',
        dest='punctuation',
        action='store_false')
    punc_group.set_defaults(punctuation=False)
    parser.add_argument(
        '-t',
        '--length',
        type=int,
        action='store',
        dest='length',
        default=10)

    char_group = parser.add_mutually_exclusive_group()
    char_group.add_argument(
        '-L',
        '--no-lefthand',
        dest='left_hand',
        action='store_false')
    char_group.add_argument(
        '-l',
        '--lefthand',
        dest='left_hand',
        action='store_true')
    char_group.set_defaults(left_hand=False)
    char_group.add_argument(
        '-R',
        '--no-righthand',
        dest='right_hand',
        action='store_false')
    char_group.add_argument(
        '-r',
        '--righthand',
        dest='right_hand',
        action='store_true')
    parser.set_defaults(right_hand=False)
    print_group = parser.add_mutually_exclusive_group()
    print_group.add_argument(
        '-q',
        '--qrcode',
        dest='qrcode',
        action='store_true')
    parser.set_defaults(qrcode=False)
    args = parser.parse_args()
    pwd = GenPassword(length=args.length,
                      left_hand=args.left_hand,
                      right_hand=args.right_hand,
                      uppercase=args.uppercase,
                      mixedcase=args.mixedcase,
                      digits=args.number,
                      punctuation=args.punctuation)
    while check_compromised(pwd):
        print('compromised password :{0}. generating new one'.format(pwd))
        pwd = GenPassword(length=args.length,
                      left_hand=args.left_hand,
                      right_hand=args.right_hand,
                      uppercase=args.uppercase,
                      mixedcase=args.mixedcase,
                      digits=args.number,
                      punctuation=args.punctuation)
    CopyClipboard(pwd)
   
    if args.qrcode:
        print(printQRCode(pwd))
    else:
        print (pwd)
